"""
Script de teste para validar configura√ß√£o do ambiente
Execute: python test_setup.py
"""
import sys
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent))

from src.utils.config import settings, BASE_DIR
from src.utils.logger import get_logger

logger = get_logger(__name__)


def test_environment():
    """Testa configura√ß√£o do ambiente"""
    print("\n" + "="*60)
    print("üîç FISCALIA - Teste de Configura√ß√£o do Ambiente")
    print("="*60 + "\n")
    
    # Testar configura√ß√µes
    print("üìã Configura√ß√µes Carregadas:")
    print(f"   ‚Ä¢ Ambiente: {settings.environment}")
    print(f"   ‚Ä¢ LLM Provider: {settings.llm_provider}")
    print(f"   ‚Ä¢ Modelo: {settings.groq_model if settings.llm_provider == 'groq' else settings.openai_model}")
    print(f"   ‚Ä¢ Database: {settings.db_type}")
    print(f"   ‚Ä¢ Log Level: {settings.log_level}")
    
    # Testar paths
    print(f"\nüìÅ Diret√≥rios:")
    print(f"   ‚Ä¢ Base: {BASE_DIR}")
    print(f"   ‚Ä¢ Entrados: {settings.arquivos_entrados}")
    print(f"   ‚Ä¢ Processados: {settings.arquivos_processados}")
    print(f"   ‚Ä¢ Rejeitados: {settings.arquivos_rejeitados}")
    print(f"   ‚Ä¢ Database: {settings.get_database_path()}")
    
    # Validar configura√ß√£o
    print(f"\n‚úÖ Valida√ß√£o:")
    is_valid, errors = settings.validate_config()
    
    if is_valid:
        print("   ‚úì Todas as configura√ß√µes est√£o corretas!")
    else:
        print("   ‚úó Erros encontrados:")
        for error in errors:
            print(f"     - {error}")
    
    # Testar diret√≥rios
    print(f"\nüìÇ Verifica√ß√£o de Diret√≥rios:")
    directories = [
        settings.arquivos_entrados,
        settings.arquivos_processados,
        settings.arquivos_rejeitados,
        BASE_DIR / "data",
        BASE_DIR / "logs"
    ]
    
    for directory in directories:
        exists = directory.exists()
        status = "‚úì" if exists else "‚úó"
        print(f"   {status} {directory}")
    
    # Testar logger
    print(f"\nüìù Teste de Logger:")
    try:
        logger.info("Teste de log INFO - OK")
        logger.warning("Teste de log WARNING - OK")
        logger.error("Teste de log ERROR - OK")
        print("   ‚úì Sistema de logging funcionando!")
    except Exception as e:
        print(f"   ‚úó Erro no sistema de logging: {e}")
    
    # Testar imports principais
    print(f"\nüì¶ Teste de Importa√ß√µes:")
    try:
        import crewai
        print(f"   ‚úì CrewAI {crewai.__version__}")
    except ImportError as e:
        print(f"   ‚úó CrewAI: {e}")
    
    try:
        import streamlit
        print(f"   ‚úì Streamlit {streamlit.__version__}")
    except ImportError as e:
        print(f"   ‚úó Streamlit: {e}")
    
    try:
        import sqlalchemy
        print(f"   ‚úì SQLAlchemy {sqlalchemy.__version__}")
    except ImportError as e:
        print(f"   ‚úó SQLAlchemy: {e}")
    
    try:
        import lxml
        print(f"   ‚úì lxml {lxml.__version__}")
    except ImportError as e:
        print(f"   ‚úó lxml: {e}")
    
    # Testar LLM (sem fazer chamada real)
    print(f"\nü§ñ Configura√ß√£o LLM:")
    llm_config = settings.get_llm_config()
    api_key = llm_config['api_key']
    if api_key and len(api_key) > 10:
        masked_key = api_key[:8] + "..." + api_key[-4:]
        print(f"   ‚úì API Key configurada: {masked_key}")
        print(f"   ‚úì Provider: {llm_config['provider']}")
        print(f"   ‚úì Modelo: {llm_config['model']}")
    else:
        print(f"   ‚úó API Key n√£o configurada para {llm_config['provider']}")
    
    print("\n" + "="*60)
    if is_valid:
        print("‚úÖ Ambiente configurado corretamente!")
    else:
        print("‚ö†Ô∏è  Corrija os erros acima antes de continuar")
    print("="*60 + "\n")
    
    return is_valid


if __name__ == "__main__":
    success = test_environment()
    sys.exit(0 if success else 1)
