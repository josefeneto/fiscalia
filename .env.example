# ============================================
# FISCALIA - Configura√ß√£o M√≠nima
# ============================================
#
# Copie este arquivo para .env e configure apenas o essencial
# Todo o resto usa valores padr√£o inteligentes
#

# ==================== OBRIGAT√ìRIO ====================
# Configure PELO MENOS UMA destas op√ß√µes:

# Op√ß√£o 1: Groq (recomendado - gratuito)
GROQ_API_KEY=your-groq-key-here
# GROQ_MODEL=groq/llama-3.3-70b-versatile  # (opcional - j√° √© o padr√£o)

# Op√ß√£o 2: OpenAI
# OPENAI_API_KEY=your-openai-key-here
# OPENAI_MODEL=gpt-4o-mini  # (opcional - j√° √© o padr√£o)


# ==================== RAILWAY (PRODU√á√ÉO) ====================
# Vari√°veis que o Railway precisa:

# Database PostgreSQL (recomendado para Railway)
# Adicione um PostgreSQL Plugin no Railway e ele gera automaticamente
# DATABASE_URL=postgresql://user:password@host:port/database

# O Railway j√° configura automaticamente:
# - PORT (porta do servi√ßo)
# - RAILWAY_ENVIRONMENT (production)
# - RAILWAY_VOLUME_MOUNT_PATH (/data)


# ==================== OPCIONAL ====================
# S√≥ configure se quiser mudar os padr√µes

# Limites de processamento (valores padr√£o j√° funcionam bem)
# MAX_FILES_PER_BATCH=100
# MAX_FILE_SIZE_MB=50
# PROCESSING_TIMEOUT=600

# Ambiente (detecta automaticamente Railway vs local)
# ENVIRONMENT=development  # ou production


# ==================== N√ÉO PRECISA CONFIGURAR ====================
# Estes s√£o detectados/configurados automaticamente:
# 
# - Paths de arquivos (criados automaticamente)
# - Database SQLite (fallback se n√£o houver PostgreSQL)
# - Streamlit port/address (defaults ou Railway PORT)
# - Logging level (INFO em prod, DEBUG em dev)
# - Railway volume mount (detectado via RAILWAY_VOLUME_MOUNT_PATH)
#
# O sistema funciona "out of the box" com apenas a API key!


# ==================== QUICK START ====================
# 
# 1. DESENVOLVIMENTO LOCAL:
#    - Copie este arquivo: cp .env.example .env
#    - Adicione sua GROQ_API_KEY
#    - Rode: streamlit run app.py
#    - Pronto! ‚úÖ
#
# 2. RAILWAY (PRODU√á√ÉO):
#    a) Crie um novo projeto no Railway
#    b) Adicione um PostgreSQL Plugin (opcional mas recomendado)
#    c) No servi√ßo principal, configure APENAS:
#       * GROQ_API_KEY=sua-chave-aqui
#       * (DATABASE_URL √© auto-configurado pelo PostgreSQL Plugin)
#    d) Deploy autom√°tico via GitHub!
#    e) Railway.app cria URL p√∫blico automaticamente üöÄ
#
# 3. RAILWAY - CHECKLIST:
#    ‚úÖ railway.json configurado
#    ‚úÖ Dockerfile otimizado
#    ‚úÖ Volume /data montado
#    ‚úÖ Healthcheck ativo
#    ‚úÖ Build otimizado com cache
#    ‚úÖ PostgreSQL opcional
#    ‚úÖ Restart autom√°tico


# ==================== TROUBLESHOOTING ====================
#
# Erro: "No API key found"
# ‚Üí Adicione GROQ_API_KEY ou OPENAI_API_KEY
#
# Erro: "Database connection failed" 
# ‚Üí Verifique DATABASE_URL ou deixe usar SQLite
#
# Erro: "Port already in use"
# ‚Üí Railway configura PORT automaticamente
#
# Logs n√£o aparecem:
# ‚Üí Railway mostra logs em tempo real no dashboard